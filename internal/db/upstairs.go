// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Upstair is an object representing the database table.
type Upstair struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Timestamp   time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Provider    string    `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	Temperature float64   `boil:"temperature" json:"temperature" toml:"temperature" yaml:"temperature"`
	Pressure    float64   `boil:"pressure" json:"pressure" toml:"pressure" yaml:"pressure"`
	Humidity    float64   `boil:"humidity" json:"humidity" toml:"humidity" yaml:"humidity"`

	R *upstairR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upstairL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpstairColumns = struct {
	ID          string
	CreatedAt   string
	Timestamp   string
	Provider    string
	Temperature string
	Pressure    string
	Humidity    string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	Timestamp:   "timestamp",
	Provider:    "provider",
	Temperature: "temperature",
	Pressure:    "pressure",
	Humidity:    "humidity",
}

var UpstairTableColumns = struct {
	ID          string
	CreatedAt   string
	Timestamp   string
	Provider    string
	Temperature string
	Pressure    string
	Humidity    string
}{
	ID:          "upstairs.id",
	CreatedAt:   "upstairs.created_at",
	Timestamp:   "upstairs.timestamp",
	Provider:    "upstairs.provider",
	Temperature: "upstairs.temperature",
	Pressure:    "upstairs.pressure",
	Humidity:    "upstairs.humidity",
}

// Generated where

var UpstairWhere = struct {
	ID          whereHelperint
	CreatedAt   whereHelpertime_Time
	Timestamp   whereHelpertime_Time
	Provider    whereHelperstring
	Temperature whereHelperfloat64
	Pressure    whereHelperfloat64
	Humidity    whereHelperfloat64
}{
	ID:          whereHelperint{field: "\"prh\".\"upstairs\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"prh\".\"upstairs\".\"created_at\""},
	Timestamp:   whereHelpertime_Time{field: "\"prh\".\"upstairs\".\"timestamp\""},
	Provider:    whereHelperstring{field: "\"prh\".\"upstairs\".\"provider\""},
	Temperature: whereHelperfloat64{field: "\"prh\".\"upstairs\".\"temperature\""},
	Pressure:    whereHelperfloat64{field: "\"prh\".\"upstairs\".\"pressure\""},
	Humidity:    whereHelperfloat64{field: "\"prh\".\"upstairs\".\"humidity\""},
}

// UpstairRels is where relationship names are stored.
var UpstairRels = struct {
}{}

// upstairR is where relationships are stored.
type upstairR struct {
}

// NewStruct creates a new relationship struct
func (*upstairR) NewStruct() *upstairR {
	return &upstairR{}
}

// upstairL is where Load methods for each relationship are stored.
type upstairL struct{}

var (
	upstairAllColumns            = []string{"id", "created_at", "timestamp", "provider", "temperature", "pressure", "humidity"}
	upstairColumnsWithoutDefault = []string{"timestamp", "provider", "temperature", "pressure", "humidity"}
	upstairColumnsWithDefault    = []string{"id", "created_at"}
	upstairPrimaryKeyColumns     = []string{"id"}
	upstairGeneratedColumns      = []string{}
)

type (
	// UpstairSlice is an alias for a slice of pointers to Upstair.
	// This should almost always be used instead of []Upstair.
	UpstairSlice []*Upstair
	// UpstairHook is the signature for custom Upstair hook methods
	UpstairHook func(context.Context, boil.ContextExecutor, *Upstair) error

	upstairQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upstairType                 = reflect.TypeOf(&Upstair{})
	upstairMapping              = queries.MakeStructMapping(upstairType)
	upstairPrimaryKeyMapping, _ = queries.BindMapping(upstairType, upstairMapping, upstairPrimaryKeyColumns)
	upstairInsertCacheMut       sync.RWMutex
	upstairInsertCache          = make(map[string]insertCache)
	upstairUpdateCacheMut       sync.RWMutex
	upstairUpdateCache          = make(map[string]updateCache)
	upstairUpsertCacheMut       sync.RWMutex
	upstairUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var upstairAfterSelectHooks []UpstairHook

var upstairBeforeInsertHooks []UpstairHook
var upstairAfterInsertHooks []UpstairHook

var upstairBeforeUpdateHooks []UpstairHook
var upstairAfterUpdateHooks []UpstairHook

var upstairBeforeDeleteHooks []UpstairHook
var upstairAfterDeleteHooks []UpstairHook

var upstairBeforeUpsertHooks []UpstairHook
var upstairAfterUpsertHooks []UpstairHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upstair) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upstair) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upstair) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upstair) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upstair) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upstair) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upstair) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upstair) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upstair) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range upstairAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpstairHook registers your hook function for all future operations.
func AddUpstairHook(hookPoint boil.HookPoint, upstairHook UpstairHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		upstairAfterSelectHooks = append(upstairAfterSelectHooks, upstairHook)
	case boil.BeforeInsertHook:
		upstairBeforeInsertHooks = append(upstairBeforeInsertHooks, upstairHook)
	case boil.AfterInsertHook:
		upstairAfterInsertHooks = append(upstairAfterInsertHooks, upstairHook)
	case boil.BeforeUpdateHook:
		upstairBeforeUpdateHooks = append(upstairBeforeUpdateHooks, upstairHook)
	case boil.AfterUpdateHook:
		upstairAfterUpdateHooks = append(upstairAfterUpdateHooks, upstairHook)
	case boil.BeforeDeleteHook:
		upstairBeforeDeleteHooks = append(upstairBeforeDeleteHooks, upstairHook)
	case boil.AfterDeleteHook:
		upstairAfterDeleteHooks = append(upstairAfterDeleteHooks, upstairHook)
	case boil.BeforeUpsertHook:
		upstairBeforeUpsertHooks = append(upstairBeforeUpsertHooks, upstairHook)
	case boil.AfterUpsertHook:
		upstairAfterUpsertHooks = append(upstairAfterUpsertHooks, upstairHook)
	}
}

// One returns a single upstair record from the query.
func (q upstairQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Upstair, error) {
	o := &Upstair{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for upstairs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Upstair records from the query.
func (q upstairQuery) All(ctx context.Context, exec boil.ContextExecutor) (UpstairSlice, error) {
	var o []*Upstair

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Upstair slice")
	}

	if len(upstairAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Upstair records in the query.
func (q upstairQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count upstairs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q upstairQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if upstairs exists")
	}

	return count > 0, nil
}

// Upstairs retrieves all the records using an executor.
func Upstairs(mods ...qm.QueryMod) upstairQuery {
	mods = append(mods, qm.From("\"prh\".\"upstairs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"prh\".\"upstairs\".*"})
	}

	return upstairQuery{q}
}

// FindUpstair retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpstair(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Upstair, error) {
	upstairObj := &Upstair{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"prh\".\"upstairs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, upstairObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from upstairs")
	}

	if err = upstairObj.doAfterSelectHooks(ctx, exec); err != nil {
		return upstairObj, err
	}

	return upstairObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upstair) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no upstairs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upstairColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	upstairInsertCacheMut.RLock()
	cache, cached := upstairInsertCache[key]
	upstairInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			upstairAllColumns,
			upstairColumnsWithDefault,
			upstairColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(upstairType, upstairMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upstairType, upstairMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"prh\".\"upstairs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"prh\".\"upstairs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into upstairs")
	}

	if !cached {
		upstairInsertCacheMut.Lock()
		upstairInsertCache[key] = cache
		upstairInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Upstair.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upstair) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	upstairUpdateCacheMut.RLock()
	cache, cached := upstairUpdateCache[key]
	upstairUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			upstairAllColumns,
			upstairPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("db: unable to update upstairs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"prh\".\"upstairs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upstairPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upstairType, upstairMapping, append(wl, upstairPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "db: unable to update upstairs row")
	}

	if !cached {
		upstairUpdateCacheMut.Lock()
		upstairUpdateCache[key] = cache
		upstairUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q upstairQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "db: unable to update all for upstairs")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpstairSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upstairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"prh\".\"upstairs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upstairPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to update all in upstair slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upstair) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no upstairs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upstairColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upstairUpsertCacheMut.RLock()
	cache, cached := upstairUpsertCache[key]
	upstairUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			upstairAllColumns,
			upstairColumnsWithDefault,
			upstairColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			upstairAllColumns,
			upstairPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert upstairs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upstairPrimaryKeyColumns))
			copy(conflict, upstairPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"prh\".\"upstairs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upstairType, upstairMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upstairType, upstairMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert upstairs")
	}

	if !cached {
		upstairUpsertCacheMut.Lock()
		upstairUpsertCache[key] = cache
		upstairUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Upstair record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upstair) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("db: no Upstair provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upstairPrimaryKeyMapping)
	sql := "DELETE FROM \"prh\".\"upstairs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to delete from upstairs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q upstairQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("db: no upstairQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "db: unable to delete all from upstairs")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpstairSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	if len(upstairBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upstairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"prh\".\"upstairs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upstairPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to delete all from upstair slice")
	}

	if len(upstairAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upstair) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpstair(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpstairSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UpstairSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upstairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"prh\".\"upstairs\".* FROM \"prh\".\"upstairs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upstairPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UpstairSlice")
	}

	*o = slice

	return nil
}

// UpstairExists checks if the Upstair row exists.
func UpstairExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"prh\".\"upstairs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if upstairs exists")
	}

	return exists, nil
}

// Exists checks if the Upstair row exists.
func (o *Upstair) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UpstairExists(ctx, exec, o.ID)
}
